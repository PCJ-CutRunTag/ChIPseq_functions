#!/bin/bash
#PBS -l nodes=1:ppn=2,walltime=04:00:00
#PBS -N MACS2_random_sampling
#PBS -M ${USER}@nyu.edu
#PBS -m abe
#PBS -o localhost:/scratch/${USER}/${PBS_JOBNAME}.o${PBS_JOBID}
#PBS -e localhost:/scratch/${USER}/${PBS_JOBNAME}.o${PBS_JOBID}

module load macs2/intel/2.1.0
module load r/intel/3.2.2

################################################################################
## PURPOSE                                                                     #
# To subsample a certain number of reads from both the input and ChIP files    #
# and create the resulting bedgraph                                            #
# Note: function begins in the working directory when submitting the job       #
#                                                                              #
## VARIABLES                                                                   #
#                                                                              #
#   CHIP    -- location of the SAM file of ChIP data                           #
#   INPUT   -- location of the SAM file of the input data                      #
#   NREADS  -- the number of reads that should be randomly selected for each   #
#              library before "PCR" duplicates removal. Default: 5e+6          #
#   NREPS   -- The number of times to rerun this function on the same SAM      #
#              files. No quotes. Default: 1                                    #
# Note: Because this function can be reused repeately, a random 9 digit number #
# is incorporated into the output files for every individual repeat.           #
#                                                                              #
################################################################################

# to define the defaults
if [[ $NREADS == "" ]]; then
    NREADS="5e+6"
fi

if [[ $NREPS == "" ]]; then
    NREPS=1
fi

INPUT=$TREAT
CHIP=$CONTROL

cd $PBS_O_WORKDIR
STDIR=$PWD

## Checking file names and extracting pertitent information
if [[ $TREAT == */* ]]; then
    RE1='/(.+)-(S.+).(sam|bam)'
else
    RE1='(.+)-(S.+).(sam|bam)'
fi
if [[ $CONTROL == */* ]]; then
    RE2='/(.+)-(S.+).(sam|bam)'
else
    RE2='(.+)-(S.+).(sam|bam)'
fi

    if [[ $TREAT =~ $RE1 ]]; then
        IN1=${BASH_REMATCH[1]}
        ROOT1=${BASH_REMATCH[2]}
    else
        echo "Error: Treatment filename ($TREAT) is incorrect."
        echo "Either it is not labelled as a .sam or .bam or filename is in the incorrect format. Should be '(.+)-(S.+).(sam|bam)'."
        exit 1
    fi

    if [[ $CONTROL =~ $RE2 ]]; then
        IN2=${BASH_REMATCH[1]}
        ROOT2=${BASH_REMATCH[2]}
    else
        echo "Error: Control filename ($CONTROL) is incorrect."
        echo "Either it is not labelled as a .sam or .bam or filename is in the incorrect format. Should be '(.+)-(S.+).(sam|bam)'."
        exit 1
    fi

# starting loop here
for i in {1..$NREPS}; do

    if [[ $ROOT1 != $ROOT2 ]]; then
        echo "Filenames ($TREAT and $CONTROL) do not have the same root names and may not have been compared to the same genom
e scaffold or software."
        exit 1
    else
	# incorporate the time into the filename
	TMPID=`date +%N`
        TAGT=$IN1-$TMPID-$ROOT1
	TAGC=$IN2-$TMPID-$ROOT2
    fi


# randomly sample data
macs2 randsample -f "SAM" -t $TREAT -n $NREADS --outdir $IN1-MACS2-subsample -o $TAGT-MACS2-subsample.bed --verbose 3
macs2 randsample -f "SAM" -t $CONTROL -n $NREADS --outdir $IN1-MACS2-subsample -o $TAGC-MACS2-subsample.bed --verbose 3

# run through basic MACS2 pipeline
macs2 callpeak -t $IN1-MACS2-subsample/$TAGT-MACS2-subsample.bed -c $IN1-MACS2-subsample/$TAGC-MACS2-subsample.bed --outdir $IN1-MACS2-subsample -n $TAGT-MACS2-subsample -g 1.2e7 --bw=350 --keep-dup="auto" --nomodel -B

if [ ! -f ~/Pipeline/Bedgraph2VariableStepWiggle_v2.py ]; then
    echo "Cannot find Bedgraph2VariableStepWiggle_v2.py. Should be in ~/Pipeline/"
    exit 1
fi

# convert to wiggle
cd $IN1-MACS2-subsample

rm $TAGT-MACS2-subsample.bed
rm $TAGC-MACS2-subsample.bed

python ~/Pipeline/Bedgraph2VariableStepWiggle_v2.py -b $TAGT-MACS2-subsample_control_lambda.bdg
python ~/Pipeline/Bedgraph2VariableStepWiggle_v2.py -b $TAGT-MACS2-subsample_treat_pileup.bdg

rm $TAGT*MACS2-subsample*.bdg

if [ ! -f ~/Pipeline/normalizewig_batch.R ]; then
    echo "Cannot find normalizewig_batch.R. Should be in ~/Pipeline/"
    exit 1
fi
# normalize wiggle files
R CMD BATCH "--args $TAGT-MACS2-subsample_control_lambda $TAGT-MACS2-subsample_treat_pileup" ~/Pipeline/normalizewig_batch.R

cd $STDIR
mv $IN1-MACS2-subsample/normalizewig_batch.Rout $IN1-MACS2-subsample/$TAGT-MACS2-subsample_normalizewig_batch.Rout
gzip $IN1-MACS2-subsample/*/*.wig

# ending loop here
done

exit 0;

